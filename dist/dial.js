(()=>{var e={1:e=>{e.exports="varying vec2 vUv;\n\nuniform sampler2D uMap;\nuniform float uRadius;\nuniform vec3 uWedgeColor;\n\nvoid main() {\n    const vec2 center = vec2(0.5, 0.5);\n    float radius = distance(center, vUv);\n\n    vec4 wedgeColor = vec4(uWedgeColor.rgb, radius < uRadius ? 1.0 : 0.0);\n\n    vec2 uv = vec2(vUv.x, vUv.y);\n    vec4 texel = texture2D(uMap, uv);\n    vec4 resultColor = mix(wedgeColor, texel, texel.a);\n    if (resultColor.a < 0.5)\n        discard;\n    gl_FragColor = resultColor;\n}\n"},109:e=>{e.exports="varying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"}},t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={exports:{}};return e[n](o,o.exports,r),o.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=r(109),t=r.n(e),n=r(1),o=r.n(n);AFRAME.registerComponent("dial",{schema:{src:{type:"map"},radius:{default:.98},thetaStart:{default:0},thetaEnd:{default:230},wedgeColor:{type:"color",default:"white"}},init:function(){this.initGeometry(),this.initShader(this.data);const e=new THREE.Mesh(this.geometry,this.shader);this.el.setObject3D("mesh",e)},initGeometry:function(){const e=this.geometry=new THREE.BufferGeometry,t=.4,r=[-.4,-.4,0,t,-.4,0,-.4,t,0,t,t,0];e.setIndex([3,2,0,0,1,3]),e.setAttribute("position",new THREE.Float32BufferAttribute(r,3)),e.setAttribute("uv",new THREE.Float32BufferAttribute([0,0,1,0,0,1,1,1],2))},initShader:function(e){this.uniforms={uMap:{type:"t",value:null},uRadius:{type:"f",value:e.radius/2},uWedgeColor:{type:"v3",value:new THREE.Color(e.wedgeColor)}};const r=this.shader=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:t(),fragmentShader:o()});(new THREE.TextureLoader).load(e.src.currentSrc,(e=>{r.uniforms.uMap.value=e,e.wrapS=e.wrapT=THREE.ClampToEdgeWrapping,e.magFilfer=THREE.LinearFilter}))},update:function(){this.uniforms.uRadius.value=this.data.radius/2,this.uniforms.uWedgeColor.value=new THREE.Color(this.data.wedgeColor)}})})()})();